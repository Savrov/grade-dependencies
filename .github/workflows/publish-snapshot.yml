name: Publish SNAPSHOT versions
on:
  push:
    branches: ['main']
env:
  TOKEN: ${{ secrets.WRITE_DELETE_PACKAGES_TOKEN }}
  ORGANIZATION: ${{ github.repository_owner }}
jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Gradle Build Action
        uses: gradle/gradle-build-action@v2.8.0

      - name: Parse repository name
        id: repository_name
        run: echo "REPOSITORY=$(echo ${{ github.repository }} | cut -d '/' -f 2)" >> $GITHUB_ENV

      - name: Delete Previous SNAPSHOT versions
        run: |
          echo "org=$ORGANIZATION, repo=$REPOSITORY"
          # List all packages in the repository using the GitHub API
          RESPONSE=$(curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/orgs/$ORGANIZATION/packages?package_type=maven&visibility=internal"
          )
          # Filter packages based on the repository.name field
          PACKAGES=$(echo "$RESPONSE" | jq -r '.[] | select(.repository.name == "'"$REPOSITORY"'") | .name')
          # Check if there are packages to delete
          if [ -n "$PACKAGES" ]; then
            echo "Packages to delete: $PACKAGES"
            # Loop through and delete each package
            for PACKAGE_NAME in $PACKAGES; do
              echo "Deleting package: $PACKAGE_NAME"
              curl -L \
                -X DELETE \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/orgs/$ORGANIZATION/packages/maven/$PACKAGE_NAME"
            done
          else
            echo "No packages found in the '$REPOSITORY' repository."
          fi
      - name: Publish package
        uses: gradle/gradle-build-action@v2
        with:
          arguments: publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
